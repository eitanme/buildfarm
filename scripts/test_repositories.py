#!/usr/bin/env python
import os
import sys
import yaml
import subprocess
import urllib
import string
import datetime
import fnmatch
import shutil
import optparse
from xml.etree.ElementTree import ElementTree
from common import *




def test_repositories(ros_distro, repositories, workspace, use_devel_repo, test_depends_on):
    print "Testing on distro %s"%ros_distro    
    print "Testing repositories %s"%', '.join(repositories)
    if use_devel_repo:
        print "Testing from devel repo"
    else:
        print "Testing from release repo"
    if test_depends_on:
        print "Testing depends-on"
    else:
        print "Not testing depends on"


    # set directories
    tmpdir = os.path.join(workspace, 'tmp', 'test_repositories', get_timestamp())
    sourcespace = os.path.join(tmpdir, 'src')
    repositorybuildspace = os.path.join(tmpdir, 'build_repository')
    dependbuildspace = os.path.join(tmpdir, 'build_depend_on')
    os.makedirs(sourcespace)

    # parse the rosdistro file
    print "Parsing rosdistro file for %s"%ros_distro
    distro = RosDistro(ros_distro)
    devel = DevelDistro(ros_distro)
    for repository in repositories:
        print "Checking if repo %s exists in distr or devel file"%repository
        if not use_devel_repo and not repository in distro.repositories.keys():
            raise BuildException("Repository %s does not exist in Ros Distro"%repository)
        if use_devel_repo and not repository in devel.repositories.keys():
            raise BuildException("Repository %s does not exist in Devel Distro"%repository)


    # Add ros to apt
    print "Add ros to apt sources"
    with open('/etc/apt/sources.list.d/ros-latest.list', 'w') as f:
        f.write("deb http://packages.ros.org/ros-shadow-fixed/ubuntu %s main"%os.environ['OS_PLATFORM'])
    call("wget http://packages.ros.org/ros.key -O %s/ros.key"%workspace)
    call("apt-key add %s/ros.key"%workspace)
    call("apt-get update")

    # install stuff we need
    print "Installing stuff we need to testing"
    call("apt-get install mercurial subversion python-catkin-pkg python-support cmake --yes")

    # Create rosdep object
    print "Create rosdep object"
    rosdep = RosDepResolver(ros_distro)
    repositories_apt = [rosdep.to_apt(s) for s in repositories]
    distro_apt = [rosdep.to_apt(s) for s in distro.packages]

    # download the repositories from source
    print "Downloading all repositories"
    rosinstall = ""
    for repository in repositories:
        if use_devel_repo:
            print "Using devel distro file to download repositories"
            rosinstall += devel.repositories[repository].get_rosinstall()
        else:
            print "Using release distro file to download repositories"
            rosinstall += distro.repositories[repository].get_rosinstall_latest()
    print "rosinstall file for all repositories: \n %s"%rosinstall
    with open(workspace+"/repository.rosinstall", 'w') as f:
        f.write(rosinstall)
    print "Create rosinstall file for repositories %s"%(', '.join(repositories))
    call("rosinstall %s %s/repository.rosinstall --catkin"%(sourcespace, workspace))

    # get the repository dependencies
    print "Get all repository dependencies"
    dependencies = get_dependencies(sourcespace)
    if len(dependencies) > 0:
        print "Install all dependencies of repositories: %s"%(', '.join(dependencies))
        call("apt-get install %s --yes"%(' '.join([rosdep.to_apt(r) for r in dependencies])))
    else:
        print "Repositories have no dependencies"

    # replace the CMakeLists.txt file for repositories that use catkin
    print "Removing the CMakeLists.txt file generated by rosinstall"
    os.remove(os.path.join(sourcespace, 'CMakeLists.txt'))
    os.makedirs(repositorybuildspace)
    os.chdir(repositorybuildspace)
    print "Create a new CMakeLists.txt file using catkin"
    ros_env = get_ros_env('/opt/ros/%s/setup.bash'%ros_distro)
    call("catkin_init_workspace %s"%sourcespace, ros_env)
    call("cmake ../src/", ros_env)        
    ros_env = get_ros_env(os.path.join(repositorybuildspace, 'buildspace/setup.bash'))

    # build repositories
    print "Build repositories"
    call("make", ros_env)
    print "Test repositories"
    call("make run_tests", ros_env)

    # see if we need to do more work or not
    if not test_depends_on:
        print "We're not testing the depends-on repositories"
        copy_test_results(workspace, repositorybuildspace)
        return

    # get repository depends-on list
    print "Get list of wet repositories that depend on %s"%repository
    apt = AptDepends(os.environ['OS_PLATFORM'], os.environ['ARCH'])
    depends_on_apt = []
    depends_on = []
    for r in repositories_apt:
        for d in apt.depends_on(r):
            if d in distro_apt and not d in depends_on_apt and not d in repositories_apt:
                depends_on_apt.append(d)
                depends_on.append(rosdep.to_ros(d))
    print "Wet depends_on list for repositories: %s"%(', '.join(depends_on))
    if len(depends_on) == 0:
        copy_test_results(workspace, repositorybuildspace)
        print "No wet groovy repositories in apt depend on this repository. Test finished here"
        return

    # install depends_on repositories from source
    rosinstall = ""
    for d in depends_on:
        rosinstall += distro.packages[d].get_rosinstall_release()
    print "Rosinstall for depends_on:\n %s"%rosinstall
    with open(workspace+"/depends_on.rosinstall", 'w') as f:
        f.write(rosinstall)
    print "Create rosinstall file for depends on"
    call("rosinstall --catkin %s %s/depends_on.rosinstall"%(sourcespace, workspace))

    # install all repository and system dependencies of the depends_on list
    print "Install all dependencies of the depends_on list"
    res = []
    for s in depends_on:
        dep = get_dependencies(os.path.join(sourcespace, s))
        for d in dep:
            if not d in res:
                res.append(d)

    res_apt = []
    for d_apt in [rosdep.to_apt(d) for d in res]:
        if not d_apt in repositories_apt and not d_apt in depends_on_apt:
            res_apt.append(d_apt)
    print "Dependencies of depends_on list are %s"%(', '.join(res_apt))
    if len(res_apt) > 0:
        call("apt-get install --yes %s"%(' '.join(res_apt)))


    # replace the CMakeLists.txt file again
    print "Removing the CMakeLists.txt file generated by rosinstall"
    os.remove(os.path.join(sourcespace, 'CMakeLists.txt'))
    os.makedirs(dependbuildspace)
    os.chdir(dependbuildspace)
    print "Create a new CMakeLists.txt file using catkin"
    call("catkin_init_workspace %s"%sourcespace, ros_env)
    call("cmake ../src/", ros_env)        
    ros_env = get_ros_env(os.path.join(dependbuildspace, 'buildspace/setup.bash'))

    # build repositories
    print "Build depends-on repositories"
    call("make", ros_env)
    print "Test depends-on repositories"
    call("make run_tests", ros_env)
    copy_test_results(workspace, dependbuildspace)




def main():
    parser = optparse.OptionParser()
    parser.add_option("--devel", action="store_true", default=False)
    parser.add_option("--depends-on", action="store_true", default=False)
    (options, args) = parser.parse_args()

    if len(args) <= 1:
        print "Usage: %s ros_distro repository_name"%sys.argv[0]
        raise BuildException("Wrong number of parameters for test_repositories script")

    ros_distro = args[0]
    repositories = args[1:]
    workspace = os.environ['WORKSPACE']    
    print "Running test_repositories test on distro %s and repositories %s"%(ros_distro, ', '.join(repositories))

    test_repositories(ros_distro, repositories, workspace, options.devel, options.depends-on)



if __name__ == '__main__':
    # global try
    try:
        main()
        print "test_repositories script finished cleanly"

    # global catch
    except BuildException as ex:
        print ex.msg

    except Exception as ex:
        print "test_repositories script failed. Check out the console output above for details."
        raise ex
